#!/usr/bin/env bash

<%-
cuda = (context.node_type == "gpu") ? context.cuda_version : ""
modules = (context.modules)
wrapper = session.staged_root.join("launch_wrapper.sh")
wrapper_log = session.staged_root.join("launch_wrapper.log")
kernels = {
    python36: {
        display_name: "Python 3.6.4",
        language: "python",
        argv: [
            wrapper,
            "python",
            "-m",
            "ipykernel_launcher",
            "-f",
            "{connection_file}"
        ],
        env: {
            MODULES: "#{modules}"
        }
    },
    python37: {
        display_name: "Python 3.7.2",
        language: "python",
        argv: [
            wrapper,
            "python",
            "-m",
            "ipykernel_launcher",
            "-f",
            "{connection_file}"
        ],
        env: {
            MODULES: "#{modules}"
        }
    },
    python36cuda: {
        display_name: "Python 3.6.4 CUDA",
        language: "python",
        argv: [
            wrapper,
            "python",
            "-m",
            "ipykernel_launcher",
            "-f",
            "{connection_file}"
        ],
        env: {
            MODULES: "#{modules} TensorFlow/1.12.0-foss-2018a-Python-3.6.4 #{cuda}"
        }
    }
}
-%>

echo "Starting main script..."
echo "TTT - $(date)"

#
# Start Jupyter server
#

# Clean the environment
module purge
# export JUPYTERLAB_DIR='/home/p233780/.local/jupyterlab'
# echo $JUPYTERLAB_DIR

# Create launcher wrapper
echo "Creating launcher wrapper script..."
(
umask 077
sed 's/^ \{2\}//' > "<%= wrapper %>" << EOL
  #!/usr/bin/env bash

  # Log all output from this script
  exec &>>"<%= wrapper_log %>"

  # Load the required environment
  module purge
  module load \${MODULES}
  module list

  # Launch the original command
  set -x
  exec "\${@}"
EOL
)
chmod 700 "<%= wrapper %>"
echo "TTT - $(date)"

# Setup Jupyter environment
module use $MODULEPATH_ROOT/project/ondemand
module load <%= context.modules %>
module list
echo "TTT - $(date)"

# Set working directory to notebook root directory
cd "<%- context.start_folder -%>"
#"${NOTEBOOK_ROOT}"
echo ${PWD}

# List available kernels for debugging purposes
set -x
jupyter kernelspec list
{ set +x; } 2>/dev/null
echo "TTT - $(date)"

# Launch the Jupyter server
set -x
jupyter <%= context.jupyterlab_switch == "1" ? "lab" : "notebook" %> --config="${CONFIG_FILE}" <%= context.extra_jupyter_args %>
# jupyter <%= context.jupyterlab_switch == "1" ? "lab" : "notebook" %> --config="${CONFIG_FILE}"
